#!/usr/bin/env python3
"""
Script de v√©rification de la portabilit√© GESTIA
==============================================

V√©rifie que le projet fonctionne identiquement sur diff√©rents OS.
"""

import os
import sys
import platform
import json
from pathlib import Path

def check_os_info():
    """Affiche les informations du syst√®me d'exploitation"""
    print("üñ•Ô∏è  INFORMATIONS SYST√àME")
    print("=" * 40)
    print(f"OS: {platform.system()}")
    print(f"Version: {platform.release()}")
    print(f"Architecture: {platform.machine()}")
    print(f"Python: {sys.version}")
    print()

def check_paths():
    """V√©rifie la portabilit√© des chemins"""
    print("üìÅ V√âRIFICATION DES CHEMINS")
    print("=" * 40)
    
    # Chemins √† v√©rifier
    paths_to_check = [
        "data/development/gestia.db",
        "data/production/gestia.db", 
        "data/test/gestia.db",
        "data/.env_config.json",
        "src/gestia/core/database.py",
        "tools/manage_env.py"
    ]
    
    for path in paths_to_check:
        exists = os.path.exists(path)
        status = "‚úÖ" if exists else "‚ùå"
        print(f"{status} {path}")
    
    print()

def check_imports():
    """V√©rifie que tous les imports fonctionnent"""
    print("üì¶ V√âRIFICATION DES IMPORTS")
    print("=" * 40)
    
    modules_to_check = [
        "sqlalchemy",
        "tkinter",
        "json",
        "pathlib"
    ]
    
    for module in modules_to_check:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError:
            print(f"‚ùå {module} - MANQUANT")
    
    print()

def check_encoding():
    """V√©rifie l'encodage des caract√®res"""
    print("üî§ V√âRIFICATION DE L'ENCODAGE")
    print("=" * 40)
    
    # Test d'encodage
    test_string = "√©√®√†√ß√π‚Ç¨¬£¬•"
    try:
        encoded = test_string.encode('utf-8')
        decoded = encoded.decode('utf-8')
        if decoded == test_string:
            print("‚úÖ Encodage UTF-8 fonctionne")
        else:
            print("‚ùå Probl√®me d'encodage")
    except Exception as e:
        print(f"‚ùå Erreur d'encodage: {e}")
    
    print()

def check_configuration():
    """V√©rifie la configuration du projet"""
    print("‚öôÔ∏è  V√âRIFICATION DE LA CONFIGURATION")
    print("=" * 40)
    
    # V√©rifier le fichier de configuration
    config_file = "data/.env_config.json"
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                env = config.get('environment', 'development')
                print(f"‚úÖ Environnement actuel: {env}")
        except Exception as e:
            print(f"‚ùå Erreur lecture config: {e}")
    else:
        print("‚ùå Fichier de configuration manquant")
    
    print()

def check_database_consistency():
    """V√©rifie la coh√©rence des bases de donn√©es"""
    print("üóÑÔ∏è  V√âRIFICATION DES BASES DE DONN√âES")
    print("=" * 40)
    
    environments = ['development', 'production', 'test']
    
    for env in environments:
        db_path = f"data/{env}/gestia.db"
        if os.path.exists(db_path):
            size = os.path.getsize(db_path)
            print(f"‚úÖ {env}: {db_path} ({size} bytes)")
        else:
            print(f"‚ùå {env}: {db_path} - MANQUANT")
    
    print()

def generate_report():
    """G√©n√®re un rapport de portabilit√©"""
    print("üìä RAPPORT DE PORTABILIT√â")
    print("=" * 40)
    
    # Informations syst√®me
    report = {
        "os": platform.system(),
        "version": platform.release(),
        "python": sys.version,
        "architecture": platform.machine(),
        "timestamp": str(Path().cwd()),
        "checks": {}
    }
    
    # Sauvegarder le rapport
    report_file = f"portability_report_{platform.system().lower()}.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ Rapport sauvegard√©: {report_file}")
    print()

def main():
    """Fonction principale"""
    print("üîç V√âRIFICATION DE LA PORTABILIT√â GESTIA")
    print("=" * 50)
    print()
    
    check_os_info()
    check_paths()
    check_imports()
    check_encoding()
    check_configuration()
    check_database_consistency()
    generate_report()
    
    print("‚úÖ V√©rification termin√©e !")
    print("üí° Comparez les rapports entre vos diff√©rents OS")

if __name__ == "__main__":
    main() 