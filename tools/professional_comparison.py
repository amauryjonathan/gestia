#!/usr/bin/env python3
"""
Script professionnel de comparaison d'environnements GESTIA
=========================================================

Compare les rapports de portabilit√© entre diff√©rents OS
avec une analyse d√©taill√©e des diff√©rences.
"""

import json
import os
import glob
import hashlib
from pathlib import Path
from datetime import datetime

class EnvironmentComparator:
    """Classe pour comparer les environnements entre OS"""
    
    def __init__(self):
        self.reports = {}
        self.differences = []
        self.warnings = []
    
    def load_reports(self):
        """Charge tous les rapports de portabilit√©"""
        print("üìÇ CHARGEMENT DES RAPPORTS")
        print("=" * 40)
        
        pattern = "portability_report_*.json"
        for report_file in glob.glob(pattern):
            try:
                with open(report_file, 'r', encoding='utf-8') as f:
                    report = json.load(f)
                    os_name = report.get('os', 'unknown').lower()
                    self.reports[os_name] = report
                    print(f"‚úÖ {report_file} - {os_name}")
            except Exception as e:
                print(f"‚ùå Erreur lecture {report_file}: {e}")
        
        print(f"\nüìä {len(self.reports)} rapport(s) charg√©(s)")
        print()
    
    def compare_system_info(self):
        """Compare les informations syst√®me"""
        print("üñ•Ô∏è  COMPARAISON DES SYST√àMES")
        print("=" * 40)
        
        if len(self.reports) < 2:
            print("‚ùå Il faut au moins 2 rapports pour comparer")
            return
        
        os_names = list(self.reports.keys())
        print(f"OS compar√©s: {', '.join(os_names)}")
        print()
        
        for os_name in os_names:
            report = self.reports[os_name]
            print(f"üìã {os_name.upper()}:")
            print(f"  - OS: {report.get('os', 'N/A')}")
            print(f"  - Version: {report.get('version', 'N/A')}")
            print(f"  - Python: {report.get('python', 'N/A').split()[0]}")
            print(f"  - Architecture: {report.get('architecture', 'N/A')}")
            print()
    
    def compare_file_hashes(self):
        """Compare les hashes des fichiers critiques"""
        print("üîç COMPARAISON DES FICHIERS")
        print("=" * 40)
        
        critical_files = [
            "main.py",
            "src/gestia/core/database.py",
            "src/gestia/core/models.py",
            "src/gestia/core/services.py",
            "tools/manage_env.py"
        ]
        
        for file_path in critical_files:
            print(f"üìÑ {file_path}:")
            
            file_hashes = {}
            for os_name, report in self.reports.items():
                # Calculer le hash du fichier
                if os.path.exists(file_path):
                    hash_md5 = self.calculate_file_hash(file_path)
                    file_hashes[os_name] = hash_md5[:8]
                    print(f"  - {os_name}: {hash_md5[:8]}")
                else:
                    print(f"  - {os_name}: MANQUANT")
            
            # V√©rifier si tous les hashes sont identiques
            unique_hashes = set(file_hashes.values())
            if len(unique_hashes) > 1:
                print(f"  ‚ö†Ô∏è  DIFF√âRENCES D√âTECT√âES!")
                self.differences.append(f"Fichier {file_path} diff√©rent entre OS")
            else:
                print(f"  ‚úÖ Identique sur tous les OS")
            
            print()
    
    def compare_database_sizes(self):
        """Compare les tailles des bases de donn√©es"""
        print("üóÑÔ∏è  COMPARAISON DES BASES DE DONN√âES")
        print("=" * 40)
        
        environments = ['development', 'production', 'test']
        
        for env in environments:
            print(f"üìä {env.upper()}:")
            db_path = f"data/{env}/gestia.db"
            
            env_sizes = {}
            for os_name, report in self.reports.items():
                if os.path.exists(db_path):
                    size = os.path.getsize(db_path)
                    env_sizes[os_name] = size
                    print(f"  - {os_name}: {size} bytes")
                else:
                    print(f"  - {os_name}: MANQUANT")
            
            # V√©rifier les diff√©rences de taille
            if env_sizes:
                unique_sizes = set(env_sizes.values())
                if len(unique_sizes) > 1:
                    print(f"  ‚ö†Ô∏è  TAILLES DIFF√âRENTES!")
                    self.differences.append(f"Base {env} de tailles diff√©rentes")
                else:
                    print(f"  ‚úÖ Tailles identiques")
            
            print()
    
    def check_git_consistency(self):
        """V√©rifie la coh√©rence Git entre OS"""
        print("üìã COH√âRENCE GIT")
        print("=" * 40)
        
        # V√©rifier les fichiers non commit√©s
        uncommitted_files = set()
        for os_name, report in self.reports.items():
            warnings = report.get('warnings', [])
            for warning in warnings:
                if 'Fichier non commit√©' in warning:
                    uncommitted_files.add(warning)
        
        if uncommitted_files:
            print("‚ö†Ô∏è  Fichiers non commit√©s d√©tect√©s:")
            for file_warning in uncommitted_files:
                print(f"  - {file_warning}")
            self.warnings.append("Fichiers non synchronis√©s via Git")
        else:
            print("‚úÖ Tous les fichiers sont commit√©s")
        
        print()
    
    def calculate_file_hash(self, file_path):
        """Calcule le hash MD5 d'un fichier"""
        try:
            with open(file_path, 'rb') as f:
                return hashlib.md5(f.read()).hexdigest()
        except Exception:
            return "ERROR"
    
    def generate_comparison_report(self):
        """G√©n√®re un rapport de comparaison"""
        print("üìä RAPPORT DE COMPARAISON")
        print("=" * 40)
        
        total_os = len(self.reports)
        print(f"üìà OS analys√©s: {total_os}")
        
        if self.differences:
            print(f"\nüö® Diff√©rences d√©tect√©es ({len(self.differences)}):")
            for diff in self.differences:
                print(f"  - {diff}")
        else:
            print("\n‚úÖ Aucune diff√©rence critique d√©tect√©e")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è  Avertissements ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"  - {warning}")
        
        print()
    
    def save_comparison_report(self):
        """Sauvegarde le rapport de comparaison"""
        comparison_report = {
            "timestamp": datetime.now().isoformat(),
            "os_count": len(self.reports),
            "os_list": list(self.reports.keys()),
            "differences": self.differences,
            "warnings": self.warnings,
            "summary": {
                "has_differences": len(self.differences) > 0,
                "has_warnings": len(self.warnings) > 0,
                "all_identical": len(self.differences) == 0
            }
        }
        
        report_file = f"comparison_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(comparison_report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ Rapport de comparaison sauvegard√©: {report_file}")
        return report_file
    
    def run_comparison(self):
        """Ex√©cute la comparaison compl√®te"""
        print("üîç COMPARAISON PROFESSIONNELLE D'ENVIRONNEMENTS GESTIA")
        print("=" * 60)
        print()
        
        # Charger les rapports
        self.load_reports()
        
        if len(self.reports) < 2:
            print("‚ùå Impossible de comparer - il faut au moins 2 rapports")
            print("üí° Ex√©cutez professional_portability_check.py sur vos diff√©rents OS")
            return
        
        # Effectuer les comparaisons
        self.compare_system_info()
        self.compare_file_hashes()
        self.compare_database_sizes()
        self.check_git_consistency()
        
        # G√©n√©rer le rapport
        self.generate_comparison_report()
        report_file = self.save_comparison_report()
        
        print("‚úÖ Comparaison termin√©e !")
        print(f"üìÅ Rapport: {report_file}")
        
        # Retourner le statut
        if self.differences:
            print("üö® ATTENTION: Diff√©rences d√©tect√©es entre les OS!")
            return False
        else:
            print("‚úÖ Tous les environnements sont coh√©rents!")
            return True

def main():
    """Fonction principale"""
    comparator = EnvironmentComparator()
    success = comparator.run_comparison()
    
    if not success:
        sys.exit(1)  # Diff√©rences d√©tect√©es
    else:
        sys.exit(0)  # Succ√®s

if __name__ == "__main__":
    import sys
    main() 