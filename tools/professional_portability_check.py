#!/usr/bin/env python3
"""
Script professionnel de v√©rification de portabilit√© GESTIA
========================================================

Simule les pratiques professionnelles pour garantir la portabilit√©
entre diff√©rents syst√®mes d'exploitation.
"""

import os
import sys
import platform
import json
import hashlib
import subprocess
from pathlib import Path
from datetime import datetime

class PortabilityChecker:
    """Classe pour v√©rifier la portabilit√© du projet"""
    
    def __init__(self):
        self.project_root = Path.cwd()
        self.report = {
            "timestamp": datetime.now().isoformat(),
            "os": platform.system(),
            "version": platform.release(),
            "python": sys.version,
            "architecture": platform.machine(),
            "checks": {},
            "errors": [],
            "warnings": []
        }
    
    def check_file_structure(self):
        """V√©rifie la structure des fichiers critiques"""
        print("üìÅ V√âRIFICATION DE LA STRUCTURE")
        print("=" * 40)
        
        critical_files = [
            "main.py",
            "src/gestia/core/database.py",
            "src/gestia/core/models.py",
            "src/gestia/core/services.py",
            "tools/manage_env.py",
            "data/.env_config.json",
            "requirements.txt"
        ]
        
        structure_ok = True
        for file_path in critical_files:
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                print(f"‚úÖ {file_path} ({size} bytes)")
            else:
                print(f"‚ùå {file_path} - MANQUANT")
                structure_ok = False
                self.report["errors"].append(f"Fichier manquant: {file_path}")
        
        self.report["checks"]["structure"] = structure_ok
        print()
        return structure_ok
    
    def check_database_consistency(self):
        """V√©rifie la coh√©rence des bases de donn√©es"""
        print("üóÑÔ∏è  V√âRIFICATION DES BASES DE DONN√âES")
        print("=" * 40)
        
        environments = ['development', 'production', 'test']
        db_consistency = True
        
        for env in environments:
            db_path = f"data/{env}/gestia.db"
            if os.path.exists(db_path):
                size = os.path.getsize(db_path)
                # Calculer le hash pour v√©rifier l'int√©grit√©
                hash_md5 = self.calculate_file_hash(db_path)
                print(f"‚úÖ {env}: {db_path} ({size} bytes) - Hash: {hash_md5[:8]}")
            else:
                print(f"‚ùå {env}: {db_path} - MANQUANT")
                db_consistency = False
                self.report["errors"].append(f"Base de donn√©es manquante: {db_path}")
        
        self.report["checks"]["database"] = db_consistency
        print()
        return db_consistency
    
    def check_dependencies(self):
        """V√©rifie les d√©pendances Python"""
        print("üì¶ V√âRIFICATION DES D√âPENDANCES")
        print("=" * 40)
        
        required_modules = [
            "sqlalchemy",
            "tkinter",
            "json",
            "pathlib",
            "sqlite3"
        ]
        
        dependencies_ok = True
        for module in required_modules:
            try:
                __import__(module)
                print(f"‚úÖ {module}")
            except ImportError:
                print(f"‚ùå {module} - MANQUANT")
                dependencies_ok = False
                self.report["errors"].append(f"Module manquant: {module}")
        
        self.report["checks"]["dependencies"] = dependencies_ok
        print()
        return dependencies_ok
    
    def check_paths_portability(self):
        """V√©rifie la portabilit√© des chemins"""
        print("üîó V√âRIFICATION DE LA PORTABILIT√â DES CHEMINS")
        print("=" * 40)
        
        # V√©rifier les chemins critiques
        critical_paths = [
            "data/development/gestia.db",
            "data/production/gestia.db",
            "data/test/gestia.db"
        ]
        
        paths_ok = True
        for path in critical_paths:
            # V√©rifier que le chemin utilise des s√©parateurs portables
            normalized_path = os.path.normpath(path)
            if normalized_path == path:
                print(f"‚úÖ {path} - Portable")
            else:
                print(f"‚ö†Ô∏è  {path} - Normalis√© vers: {normalized_path}")
                self.report["warnings"].append(f"Chemin normalis√©: {path}")
        
        self.report["checks"]["paths"] = paths_ok
        print()
        return paths_ok
    
    def check_encoding(self):
        """V√©rifie l'encodage des caract√®res"""
        print("üî§ V√âRIFICATION DE L'ENCODAGE")
        print("=" * 40)
        
        test_strings = [
            "√©√®√†√ß√π‚Ç¨¬£¬•",
            "Hello World",
            "1234567890",
            "!@#$%^&*()"
        ]
        
        encoding_ok = True
        for test_str in test_strings:
            try:
                encoded = test_str.encode('utf-8')
                decoded = encoded.decode('utf-8')
                if decoded == test_str:
                    print(f"‚úÖ '{test_str}' - Encodage OK")
                else:
                    print(f"‚ùå '{test_str}' - Probl√®me d'encodage")
                    encoding_ok = False
            except Exception as e:
                print(f"‚ùå '{test_str}' - Erreur: {e}")
                encoding_ok = False
        
        self.report["checks"]["encoding"] = encoding_ok
        print()
        return encoding_ok
    
    def check_git_status(self):
        """V√©rifie l'√©tat Git du projet"""
        print("üìã √âTAT GIT")
        print("=" * 40)
        
        try:
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                changes = result.stdout.strip().split('\n') if result.stdout.strip() else []
                
                if changes:
                    print("‚ö†Ô∏è  Fichiers modifi√©s non commit√©s:")
                    for change in changes:
                        if change:
                            print(f"  - {change}")
                            self.report["warnings"].append(f"Fichier non commit√©: {change}")
                else:
                    print("‚úÖ Aucune modification non commit√©e")
                
                # V√©rifier la branche actuelle
                branch_result = subprocess.run(['git', 'branch', '--show-current'], 
                                            capture_output=True, text=True, timeout=10)
                if branch_result.returncode == 0:
                    current_branch = branch_result.stdout.strip()
                    print(f"üåø Branche actuelle: {current_branch}")
                
            else:
                print("‚ùå Erreur Git")
                self.report["errors"].append("Erreur lors de la v√©rification Git")
                
        except Exception as e:
            print(f"‚ùå Erreur v√©rification Git: {e}")
            self.report["errors"].append(f"Exception Git: {e}")
        
        print()
    
    def calculate_file_hash(self, file_path):
        """Calcule le hash MD5 d'un fichier"""
        try:
            with open(file_path, 'rb') as f:
                return hashlib.md5(f.read()).hexdigest()
        except Exception:
            return "ERROR"
    
    def generate_summary(self):
        """G√©n√®re un r√©sum√© de la v√©rification"""
        print("üìä R√âSUM√â DE LA V√âRIFICATION")
        print("=" * 40)
        
        total_checks = len(self.report["checks"])
        passed_checks = sum(1 for check in self.report["checks"].values() if check)
        failed_checks = total_checks - passed_checks
        
        print(f"‚úÖ Tests r√©ussis: {passed_checks}/{total_checks}")
        print(f"‚ùå Tests √©chou√©s: {failed_checks}/{total_checks}")
        
        if self.report["errors"]:
            print(f"\nüö® Erreurs ({len(self.report['errors'])}):")
            for error in self.report["errors"]:
                print(f"  - {error}")
        
        if self.report["warnings"]:
            print(f"\n‚ö†Ô∏è  Avertissements ({len(self.report['warnings'])}):")
            for warning in self.report["warnings"]:
                print(f"  - {warning}")
        
        print()
    
    def save_report(self):
        """Sauvegarde le rapport"""
        report_file = f"portability_report_{platform.system().lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ Rapport sauvegard√©: {report_file}")
        return report_file
    
    def run_all_checks(self):
        """Ex√©cute tous les tests de portabilit√©"""
        print("üîç V√âRIFICATION PROFESSIONNELLE DE PORTABILIT√â GESTIA")
        print("=" * 60)
        print()
        
        # Ex√©cuter tous les tests
        self.check_file_structure()
        self.check_database_consistency()
        self.check_dependencies()
        self.check_paths_portability()
        self.check_encoding()
        self.check_git_status()
        
        # G√©n√©rer le r√©sum√©
        self.generate_summary()
        
        # Sauvegarder le rapport
        report_file = self.save_report()
        
        print("‚úÖ V√©rification termin√©e !")
        print("üí° Comparez les rapports entre vos diff√©rents OS")
        print(f"üìÅ Rapport: {report_file}")
        
        return self.report

def main():
    """Fonction principale"""
    checker = PortabilityChecker()
    report = checker.run_all_checks()
    
    # Retourner le code de sortie appropri√©
    if report["errors"]:
        sys.exit(1)  # Erreur
    elif report["warnings"]:
        sys.exit(2)  # Avertissements
    else:
        sys.exit(0)  # Succ√®s

if __name__ == "__main__":
    main() 