#!/usr/bin/env python3
"""
Script de test des nouvelles fonctionnalit√©s GESTIA
==================================================

Teste les nouvelles fonctionnalit√©s d'actions √† faire et probl√®mes identifi√©s.
"""

import sys
import os

# Ajouter le r√©pertoire src au path pour les imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from gestia.core.database import db_manager, init_database
from gestia.core.services import AppareilService, TechnicienService
from gestia.core.models import EtatAppareil
from datetime import date

def tester_nouvelles_fonctionnalites():
    """Teste les nouvelles fonctionnalit√©s"""
    print("üß™ Test des nouvelles fonctionnalit√©s GESTIA...")
    
    try:
        # Initialiser la base de donn√©es
        init_database()
        db = db_manager.get_session()
        
        # Cr√©er un technicien de test
        technicien = TechnicienService.creer_technicien(db, "Dupont", "Jean")
        print(f"‚úÖ Technicien cr√©√©: {technicien.ID_Technicien}")
        
        # Cr√©er un appareil de test
        appareil = AppareilService.creer_appareil(
            db, "Samsung", "WW90T534DAW", "SN123456789", date.today()
        )
        print(f"‚úÖ Appareil cr√©√©: {appareil.ID_Appareil}")
        
        # Tester la mise √† jour des actions √† faire
        actions_test = """‚Ä¢ V√©rifier le verrouillage de porte
‚Ä¢ Tester le cycle de lavage complet
‚Ä¢ Contr√¥ler la vidange
‚Ä¢ Valider l'essorage"""
        
        if AppareilService.mettre_a_jour_actions_a_faire(db, appareil.ID_Appareil, actions_test):
            print("‚úÖ Actions √† faire mises √† jour avec succ√®s")
        else:
            print("‚ùå √âchec de la mise √† jour des actions √† faire")
        
        # Tester la mise √† jour des probl√®mes identifi√©s
        problemes_test = """‚Ä¢ Bruit anormal lors de l'essorage
‚Ä¢ Fuite mineure au niveau du joint de porte
‚Ä¢ Affichage LCD partiellement d√©faillant"""
        
        if AppareilService.mettre_a_jour_problemes_identifies(db, appareil.ID_Appareil, problemes_test):
            print("‚úÖ Probl√®mes identifi√©s mis √† jour avec succ√®s")
        else:
            print("‚ùå √âchec de la mise √† jour des probl√®mes identifi√©s")
        
        # R√©cup√©rer le r√©capitulatif complet
        recapitulatif = AppareilService.obtenir_recapitulatif_appareil(db, appareil.ID_Appareil)
        if recapitulatif:
            print("‚úÖ R√©capitulatif r√©cup√©r√© avec succ√®s")
            print(f"   - Actions √† faire: {recapitulatif['appareil'].ActionsAFaire[:50]}...")
            print(f"   - Probl√®mes identifi√©s: {recapitulatif['appareil'].SoucisMachine[:50]}...")
        else:
            print("‚ùå √âchec de la r√©cup√©ration du r√©capitulatif")
        
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False
    finally:
        db.close()
    
    return True

if __name__ == "__main__":
    tester_nouvelles_fonctionnalites() 