#!/usr/bin/env python3
"""
Script de migration de la base de donn√©es GESTIA
===============================================

Ajoute les nouvelles colonnes ActionsAFaire et SoucisMachine √† la table appareils.
"""

import sys
import os

# Ajouter le r√©pertoire src au path pour les imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from gestia.core.database import db_manager, init_database
from sqlalchemy import text

def migrer_base_donnees():
    """Effectue la migration de la base de donn√©es"""
    print("üîÑ Migration de la base de donn√©es GESTIA...")
    
    try:
        # Initialiser la base de donn√©es
        init_database()
        
        # Obtenir une session
        db = db_manager.get_session()
        
        # V√©rifier si les colonnes existent d√©j√†
        result = db.execute(text("PRAGMA table_info(appareils)"))
        colonnes_existantes = [row[1] for row in result.fetchall()]
        
        print(f"Colonnes existantes: {colonnes_existantes}")
        
        # Ajouter la colonne ActionsAFaire si elle n'existe pas
        if 'ActionsAFaire' not in colonnes_existantes:
            print("‚ûï Ajout de la colonne ActionsAFaire...")
            db.execute(text("ALTER TABLE appareils ADD COLUMN ActionsAFaire TEXT"))
            print("‚úÖ Colonne ActionsAFaire ajout√©e avec succ√®s")
        else:
            print("‚ÑπÔ∏è  Colonne ActionsAFaire existe d√©j√†")
        
        # Ajouter la colonne SoucisMachine si elle n'existe pas
        if 'SoucisMachine' not in colonnes_existantes:
            print("‚ûï Ajout de la colonne SoucisMachine...")
            db.execute(text("ALTER TABLE appareils ADD COLUMN SoucisMachine TEXT"))
            print("‚úÖ Colonne SoucisMachine ajout√©e avec succ√®s")
        else:
            print("‚ÑπÔ∏è  Colonne SoucisMachine existe d√©j√†")
        
        # Valider les changements
        db.commit()
        
        # V√©rifier le r√©sultat final
        result = db.execute(text("PRAGMA table_info(appareils)"))
        colonnes_finales = [row[1] for row in result.fetchall()]
        print(f"Colonnes finales: {colonnes_finales}")
        
        print("‚úÖ Migration termin√©e avec succ√®s !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration: {e}")
        db.rollback()
        return False
    finally:
        db.close()
    
    return True

if __name__ == "__main__":
    migrer_base_donnees() 